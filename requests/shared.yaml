schemas:
  bucket:
    type: string
    example: example
    description: The bucket (client) name

  currency:
    type: string
    example: gbp
    description: A three letter currency code (lower case)
    enum:
      - gbp
      - usd
      - eur
      - aed
      - aud
      - bbd
      - bgn
      - bhd
      - bsd
      - bwp
      - cad
      - chf
      - cny
      - czk
      - dkk
      - fjd
      - ghs
      - hkd
      - hrk
      - huf
      - idr
      - ils
      - inr
      - jmd
      - jod
      - jpy
      - kes
      - kwd
      - kyd
      - lkr
      - lsl
      - mad
      - mur
      - mwk
      - mxn
      - myr
      - nad
      - ngn
      - nok
      - nzd
      - omr
      - php
      - pkr
      - pln
      - qar
      - ron
      - rsd
      - rub
      - sek
      - sgd
      - thb
      - tnd
      - try
      - ttd
      - twd
      - ugx
      - zar

  date:
    type: string
    example: 2020-01-01
    description: A date in the format YYYY-MM-DD

  datetime:
    type: string
    example: 2023-09-05T11:27:06.437000
    description: A date in the format YYYY-MM-DDTHH:MM:SS.mmmmmm

  email:
    type: string
    example: bob@example.com

  engine_number:
    type: string
    example: 1234567890
    description: Vehicle engine number

  identifying_number:
    type: string
    example: 1234567890
    description: Vehicle identifying number (VIN in modern cars)

  number_as_string:
    type: string
    example: "123.45"
    description: A decimal number stored as a string

  member_uri:
    type: string
    example: /example/member/6305f074683e800f3abe809e/
    description: a member URI or 'membership' uri will always be in the format `/bucket/member/uid/` with the word 'member' in the middle

  q:
    type: string
    example: john smith

  resource_type:
    type: string
    example: person
    description: The type of resource, usually the second element in the URI e.g person, organisation, member, payment

  sort_order:
    type: number
    example: 1
    description: A number that can be used to sort a list of items, low is first, high is last

  signature:
    type: string
    example: 6305f
    description: An alphanumeric string that is used to verify the request

  registration_number:
    type: string
    example: EK23 JWW
    description: Vehicle registration number

  time:
    type: string
    example: 11:27
    description: A date in the format HH:MM

  uid:
    type: string
    example: 6305f074683e800f3abe809e
    description: Usually the final element in the URI, an alphanumeric unique identifier

  uri:
    type: string
    example: /example/person/6305f074683e800f3abe809e/
    description: URIs are unique identifiers for resources in the system, they are structured as follows `/bucket/resource_type/uid/`

  url:
    type: string
    example: "https://s3-eu-west-1.amazonaws.com/sheepcrm/example/vehicle/63ceaeacd403a64149a3de0c/photo/mycar.jpg"
    description: A fully qualified URL including the protocol e.g. https

  #
  # Sub-Packets
  #

  user_account:
    type: object
    properties:
      email:
        $ref: '#/schemas/email'
      first_name:
        type: string
      last_name:
        type: string
      last_login_date:
        $ref: '#/schemas/datetime'
      session_expiry:
        $ref: '#/schemas/datetime'
      uri:
        $ref: '#/schemas/uri'
      username:
        type: string

  user_context:
    type: object
    properties:
      contact_uri:
        $ref: '#/schemas/uri'
      is_logged_in:
        type: boolean
      is_member:
        type: boolean
      user_account:
        $ref: '#/schemas/user_account'
      username:
        type: string

  page_config:
    type: object
    properties:
      active:
        type: boolean
      archive_date:
        $ref: '#/schemas/uri'
      body:
        type: string
      fallback_body:
        type: string
      file:
        $ref: '#/schemas/url'
      filter:
        type: object
      legacy_uid:
        type: string
      member_only:
        type: boolean
      meta:
        type: object
      path:
        type: string
      photo:
        $ref: '#/schemas/url'
      public:
        type: boolean
      publish_date:
        $ref: '#/schemas/date'
      resource_type:
        $ref: '#/schemas/resource_type'
      secondary_photos:
        type: array
      table_config: {}
      tags:
        type: array
      template:
        type: string
      thumbnail:
        $ref: '#/schemas/url'
      title:
        type: string
      uri:
        $ref: '#/schemas/uri'


parameters:
  split_uri:
    - name: bucket
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/bucket'
    - name: resource_type
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/resource_type'
    - name: uid
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/uid'

  split_uri_with_signature:
    - name: bucket
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/bucket'
    - name: resource_type
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/resource_type'
    - name: uid
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/uid'
    - name: signature
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/signature'

  bucket_and_uid:
    - name: bucket
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/bucket'
    - name: uid
      in: path
      required: true
      schema:
        $ref: 'shared.yaml#/schemas/uid'

responses:
  standard:
    '200':
      description: Successful operation
    '400':
      description: Bad request, see the error field for details
    '401':
      description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
    '403':
      description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.

  standard_pdf:
    '200':
      description: Binary PDF file
      content:
        application/pdf:
          schema:
            type: string
            format: binary
    '400':
      description: Bad request, see the error field for details
    '401':
      description: Unauthorized is the status code to return when the client provides no credentials or invalid credentials.
    '403':
      description: Forbidden is the status code to return when a client has valid credentials but not enough privileges to perform an action on a resource.

