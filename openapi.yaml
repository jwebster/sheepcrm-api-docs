openapi: 3.0.0
info:
  title: sheepCRM API
  version: 1.0.0
servers:
  - url: https://sls-api-dev.sheepcrm.com
paths:

  /api/v2/find/person/{bucket}:
    get:
      summary: Find a person
      description: find a person contact from within sheepCRM
      operationId: findPerson
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: first_name
          in: query
          required: false
          schema:
            type: string
        - name: last_name
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: date_of_birth
          in: query
          required: false
          schema:
            type: string
        - name: postal_code
          in: query
          required: false
          schema:
            type: string
        - name: take_first_if_multiple
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation


  /api/v1{person_uri}:
    servers:
      - url: https://api.sheepcrm.com
    put:
      summary: Update a person
      description: update a person record
      operationId: putPerson
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'

      responses:
        '200':
          description: Successful operation

  /api/v2{contact_uri}summary:
    get:
      summary: Get a summary of a contact
      description: get a summary of a contact (person or organisation) from their uri
      operationId: getContactSummary
      parameters:
        - name: contact_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation

  /api/v2{person_uri}communications/detail:
    get:
      summary: Get communication details of a person
      description: get the communication details for a person e.g. email, phone, address
      operationId: getPersonCommunications
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation

  /api/v2{person_uri}personal/detail:
    get:
      summary: Get personal details of a person
      description: get the personal details for a person
      operationId: getPersonPersonal
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation

  /api/v2{person_uri}membership/all:
    get:
      summary: Get the full membership history for a person, current and historic
      description: get the full membership history for a person, use the /summary endpoint for a faster summary
      operationId: getPersonMembership
      parameters:
        - name: person_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uri'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/membershipListResponse'

  /api/v2{member_uri}:
    get:
      summary: Get a summary of a single membership record
      description: Get a summary of a single membership record (a member record), use the /detail endpoint to get the full details
      operationId: getMemberSummary
      parameters:
        - name: member_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/member_uri'
      responses:
        '200':
          description: Successful operation

  /api/v2{member_uri}detail:
    get:
      summary: Get a summary of the membership details for a person
      description: Get a summary of the membership details for a person, use the /all endpoint to get the full details
      operationId: getMemberDetail
      parameters:
        - name: member_uri
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/member_uri'
      responses:
        '200':
          description: Successful operation

  /search/v2/{bucket}:
    get:
      summary: search across the whole system
      description: search across the whole system `/search/v2/{bucket}/?q=John+Smith`
      operationId: search
      parameters:
        - name: bucket
          in: path
          description: The bucket (client) name
          required: true
          schema:
            $ref: '#/components/schemas/bucket'
        - name: q
          in: query
          description: search string
          required: false
          schema:
            $ref: '#/components/schemas/q'
      responses:
        '200':
          description: A list of resource records matching the search terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultsResponse'
        '400':
          description: a standard error message
        '401':
          description: Authentication error

  /notifications/v2/{bucket}:
    get:
      operationId: getNotifications
      summary: Get all notifications for the user
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotifications'
        '400':
          description: Bad request

  /notifications/v2/{bucket}/{resource_type}/{uid}:
    get:
      operationId: getSingleNotifications
      summary: Get a single notification
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: resource_type
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
  /notifications/v2/{bucket}/{resource_type}/{uid}/complete:
    put:
      operationId: completeSingleNotifications
      summary: Mark a single notification as complete
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: resource_type
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request

  /notifications/v2/{bucket}/{resource_type}/{uid}/snooze:
    put:
      operationId: snoozeSingleNotifications
      summary: Snooze a single notification for 24 hours or for 24 hours from now if overdue.
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: resource_type
          in: path
          required: true
          schema:
            type: string
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request

components:
  schemas:
    bucket:
      type: string
      example: example

    uri:
      type: string
      example: /example/person/6305f074683e800f3abe809e/
      description: URIs are unique identifiers for resources in the system, they are structured as follows `/bucket/resource_type/uid/`

    member_uri:
      type: string
      example: /example/member/6305f074683e800f3abe809e/
      description: a member URI or 'membership' uri will always be in the format `/bucket/member/uid/` with the word 'member' in the middle

    q:
      type: string
      example: john smith

    SearchResultsResponse:
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              display_value:
                type: string
                example: John Smith
              id:
                type: string
                example: /example/person/6305f074683e800f3abe809e/
              primary_email:
                type: string
                example: john@smith.example.com
              primary_telephone:
                type: string
                example: +44 1234 56789
              resource:
                type: string
                example: person

    getNotifications:
      type: object
      properties:
        notification:
          type: object
          properties:
            assigned_to:
              type: string
            assigned_to_display:
              type: string
            body:
              type: string
            context:
              type: string
            context_display:
              type: string
            created:
              type: string
            creator:
              type: string
            creator_reference:
              type: string
            date:
              type: string
            display_value:
              type: string
            entity:
              type: string
            entry_subtype:
              type: string
            entry_type:
              type: string
            files:
              type: array
              items:
                type: string
            last_updated:
              type: string
            link:
              type: string
            record_state:
              type: string
            star:
              type: boolean
            tags:
              type: array
              items:
                type: string
            text_body:
              type: string
            title:
              type: string
            uid:
              type: string
            uri:
              type: string
            user_interface:
              type: object
              properties:
                can_create_journal:
                  type: boolean
                can_delete_journal:
                  type: boolean
                can_edit_journal:
                  type: boolean
                can_restore_journal:
                  type: boolean
                policy_name:
                  type: string

    membershipListResponse:
      type: object
      properties:
        contact_uri:
          type: string
        count:
          type: number
          description: The number of memberships for this contact
        memberships:
          type: array
          description: A list of member records for this contact
          items:
            type: object
            properties:
              admin_contact:
                type: string
                description: The URI of the contact that is the admin for this membership. Admin contacts can manage the membership and are the primary contact for membership communication.
              advise_lapse:
                type: boolean
              amount:
                type: number
              auto_renew:
                type: boolean
              billing_contact:
                type: string
                description: The URI of the billing contact for this membership.
              cancellation_date:
                type: string
              created:
                type: string
              currency:
                type: string
              display_value:
                type: string
              end_date:
                type: string
              externally_managed:
                type: boolean
              gc_subscription_id: {}
              gift_aid:
                type: boolean
              has_renewed:
                type: boolean
              lapse_reason:
                type: string
              last_updated:
                type: string
              linked_members:
                type: array
                items:
                  type: string
              max_linked_members:
                type: number
              member:
                type: string
                description: The URI of the contact that is the primary member
              membership_number:
                type: string
              membership_plan_type:
                type: string
              membership_record_status:
                type: string
              membership_type:
                type: string
                description: The URI of the membership plan for this membership
              mute_communications:
                type: boolean
              next_membership_type:
                type: string
                description: The URI of the membership plan that this member should renew onto.
              next_payment_plan:
                type: string
                description: The URI of the payment plan that this member should use for payment when they renew.
              paid:
                type: boolean
              payment_date: {}
              payment_method:
                type: string
              payment_plan:
                type: string
              payment_reference: {}
              period:
                type: string
              record_state:
                type: string
              start_date:
                type: string
              stripe_subscription_id: {}
              tags:
                type: array
                items:
                  type: string
              tax:
                type: string
              uid:
                type: string
              uri:
                type: string
                description: a membership uri will always be in the format `/bucket/member/uid/` with the word 'member' in the middle
              user_interface:
                type: object
                properties:
                  can_create_member:
                    type: boolean
                  can_delete_member:
                    type: boolean
                  can_edit_member:
                    type: boolean
                  can_restore_member:
                    type: boolean
                  policy_name:
                    type: string
              xero_account_code: {}


